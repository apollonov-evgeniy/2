# -*- coding: utf-8 -*-
"""homework-8-apollonov.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_F4oUofanrT2hl3IcXgSttQOS_2UcsDL

# ДЗ 8. 

### Необходимо реализовать систему на python в которой есть ряд методов:

1) добавить запись о пользователе

*  запись должна добавляться в историческую таблицу (с полями start_dttm, end_dttm)
*   параметры пользователя: имя, фамилия, возраст, зарплата
*   если пользователь с таким именем и фамилией уже есть новая запись считается актуальной версией информации о пользователе

2) логически удалить пользователя (по имени и фамилии)

3) сохранить данные о пользователях на указанную дату в csv файл (если дата не указана, то вывести данные на момент вызова функции)
  

В качестве результата необходимо прислать python файл и req.txt (файл с пакетами и версиями).
"""

import sqlite3, csv
import pandas as pd
from datetime import datetime

"""
Ввод тестовой таблицы
"""
conn = None
try:
    conn = sqlite3.connect('database.db')
    cursor = conn.cursor()
     # для вывода используется пандас с преобразованием datatime. больше 2262 года не воспринимает
    cursor.executescript("""drop table if exists hist_users;
        CREATE TABLE if not exists hist_users(
          id integer primary key autoincrement,
          name varchar(128),
          surname varchar(128),
          age integer,
          salary integer,
          deleted_flg integer default 0,
          start_dttm datetime default current_timestamp,
          end_dttm datetime default (datetime('2199-12-31 23:59:59'))
        );
        BEGIN;
        INSERT INTO hist_users(name, surname, age, salary) VALUES('Сергей', 'Иванов', 15, 15000);
        INSERT INTO hist_users(name, surname, age, salary,start_dttm)
        VALUES('Петр', 'Петров', 15, 15000, datetime('2020-12-31 23:59:59'));
        INSERT INTO hist_users(name, surname, age, salary) VALUES('Андрей', 'Иванов', 25, 25000);
        INSERT INTO hist_users(name, surname, age, salary) VALUES('Сергей', 'Степанов', 35, 35000);
        INSERT INTO hist_users(name, surname, age, salary) VALUES('Дмитрий', 'Смирнов', 45, 45000)
       
      """)
    conn.commit()
 
except sqlite3.Error as e:
    if conn: conn.rollback()
    print("Ошибка выполнения запроса")
finally:
   if conn: conn.close()

conn = sqlite3.connect('database.db')
cursor = conn.cursor()

# вывод через пандас
def select(sql):
  return pd.read_sql(sql,conn) # функция для вызова sql через пандас
# --------------------------------//////////////-----------------------  
def show(table):
  sql = f'''SELECT * 
  FROM  {table} '''
  df = select(sql) # из таблицы table
  return df

# -------------- задание 1 ------------------
def add_user(name, surname, age, salary):
 
  sql = '''
    UPDATE hist_users
    set end_dttm = datetime('now', '-1 second')
    where name = ?
    and surname = ?
    and end_dttm = datetime('2199-12-31 23:59:59')
    '''
  val = [name, surname]  
  cursor.execute(sql,val)

  sql = '''
    insert into hist_users (name, surname, age, salary)
    values (?, ?, ?, ?)
    '''
  val = [name, surname, age, salary]
  cursor.execute(sql, val)
  conn.commit()

# -------------- задание 2 ------------------
def delete_restore_user(name, surname, deleted_flg = 1 ): 
  # по умалчанию удаляет и если не равно 1 восстанавливает
  sql = '''
    SELECT
      name,
      surname,
      age,
      salary
    from hist_users
    where name = ?
    and surname = ?
    and end_dttm = datetime('2199-12-31 23:59:59')  
  '''
  val = [name, surname]
  cursor.execute(sql,val)

  user_data = cursor.fetchone() # кортеж найденного
  if user_data is None:
    print('пользователь не найден')
    return

  sql = '''
  UPDATE hist_users
    set end_dttm = datetime('now', '-1 second')
    where name = ?
    and surname = ?
    and end_dttm = datetime('2199-12-31 23:59:59')
    '''
  val = [name, surname]  
  cursor.execute(sql,val)

  sql = '''
    insert into hist_users (name, surname, age, salary, deleted_flg)
    values (?, ?, ?, ?, ?)
    '''
  deleted_flg = 1 if deleted_flg ==1 else 0
  cursor.execute(sql, user_data +(deleted_flg,))
  conn.commit()

# -------------- задание 3 ------------------
# два варианта
def out_csv(date = datetime.now()): # выводит актуальных пользователей на дату
  cursor.execute('''
    SELECT
      name as name,
      surname as surname,
      age as age,
      salary  as salary,
      /* deleted_flg as deleted,*/
      start_dttm as start, 
      end_dttm as end
     FROM hist_users
     WHERE start_dttm <= ? and ? <= end_dttm
     and deleted_flg == 0
   ''',[date ,date]) 
  
  with open('output.csv', 'w', newline='', encoding='utf8') as csv_file:
    csv_writer = csv.writer(csv_file, delimiter=",")
    csv_writer.writerow([i[0] for i in cursor.description])
    csv_writer.writerows(cursor)

def out_csv_pd(date = datetime.now().strftime("%Y-%m-%d %H:%M:%S")):

  sql = f'''
      SELECT
        name as name,
        surname as surname,
        age as age,
        salary  as salary,
        /* deleted_flg as deleted,*/
        start_dttm as start, 
        end_dttm as end
      FROM hist_users
      WHERE start_dttm <= '{date}'
      and '{date}' <= end_dttm
      and deleted_flg == 0
    '''
 
  df = pd.read_sql(sql, conn)
  df.to_csv('output_pd.csv', index = False)

add_user('Сергей', 'Иванов', 15, 1)
add_user('Сергей', 'Сергеев', 10, 10000)
delete_restore_user('Сергей', 'Иванов')
delete_restore_user('Петр', 'Петров')

print('*'*100)
print(show('hist_users'))
  #df['start_dttm'] = pd.to_datetime(df['start_dttm'],format='%Y-%m-%d %H:%M:%S')
  #df['end_dttm'] = pd.to_datetime(df['end_dttm'],format='%Y-%m-%d %H:%M:%S')

out_csv('2021-08-01 13:29:28')
out_csv_pd()
print('*'*100)
df = pd.read_csv('output.csv')
print(df)
print('*'*100)
df = pd.read_csv('output_pd.csv')
print(df)
print('*'*100)